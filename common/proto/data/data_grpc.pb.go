// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: proto/data/data.proto

package data

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DataClient is the client API for Data service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DataClient interface {
	// 获取对象(流式传输)
	GetObject(ctx context.Context, in *ObjectMeta, opts ...grpc.CallOption) (Data_GetObjectClient, error)
	// 上传对象(使用流式传输)
	PutObject(ctx context.Context, opts ...grpc.CallOption) (Data_PutObjectClient, error)
	// 删除对象
	DeleteObject(ctx context.Context, in *ObjectMeta, opts ...grpc.CallOption) (*UpdateObjectResp, error)
	// 获取文本
	GetText(ctx context.Context, in *ObjectMeta, opts ...grpc.CallOption) (*GetTextResp, error)
	// 更新文本
	UpdateText(ctx context.Context, in *UpdateTextInfo, opts ...grpc.CallOption) (*UpdateObjectResp, error)
	// 上传文本
	AddText(ctx context.Context, in *TextInfo, opts ...grpc.CallOption) (*ObjectMeta, error)
	// 分片上传文件
	PutObjectChunk(ctx context.Context, in *PutObjectChunkReq, opts ...grpc.CallOption) (*PutObjectChunkResp, error)
	// 获取对象的下载链接
	GetObjectDownloadLink(ctx context.Context, in *ObjectMeta, opts ...grpc.CallOption) (*GetObjectDownloadLinkResp, error)
}

type dataClient struct {
	cc grpc.ClientConnInterface
}

func NewDataClient(cc grpc.ClientConnInterface) DataClient {
	return &dataClient{cc}
}

func (c *dataClient) GetObject(ctx context.Context, in *ObjectMeta, opts ...grpc.CallOption) (Data_GetObjectClient, error) {
	stream, err := c.cc.NewStream(ctx, &Data_ServiceDesc.Streams[0], "/api.Data/GetObject", opts...)
	if err != nil {
		return nil, err
	}
	x := &dataGetObjectClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Data_GetObjectClient interface {
	Recv() (*ObjectInfo, error)
	grpc.ClientStream
}

type dataGetObjectClient struct {
	grpc.ClientStream
}

func (x *dataGetObjectClient) Recv() (*ObjectInfo, error) {
	m := new(ObjectInfo)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dataClient) PutObject(ctx context.Context, opts ...grpc.CallOption) (Data_PutObjectClient, error) {
	stream, err := c.cc.NewStream(ctx, &Data_ServiceDesc.Streams[1], "/api.Data/PutObject", opts...)
	if err != nil {
		return nil, err
	}
	x := &dataPutObjectClient{stream}
	return x, nil
}

type Data_PutObjectClient interface {
	Send(*ObjectPutInfo) error
	CloseAndRecv() (*ObjectMeta, error)
	grpc.ClientStream
}

type dataPutObjectClient struct {
	grpc.ClientStream
}

func (x *dataPutObjectClient) Send(m *ObjectPutInfo) error {
	return x.ClientStream.SendMsg(m)
}

func (x *dataPutObjectClient) CloseAndRecv() (*ObjectMeta, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(ObjectMeta)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dataClient) DeleteObject(ctx context.Context, in *ObjectMeta, opts ...grpc.CallOption) (*UpdateObjectResp, error) {
	out := new(UpdateObjectResp)
	err := c.cc.Invoke(ctx, "/api.Data/DeleteObject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) GetText(ctx context.Context, in *ObjectMeta, opts ...grpc.CallOption) (*GetTextResp, error) {
	out := new(GetTextResp)
	err := c.cc.Invoke(ctx, "/api.Data/GetText", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) UpdateText(ctx context.Context, in *UpdateTextInfo, opts ...grpc.CallOption) (*UpdateObjectResp, error) {
	out := new(UpdateObjectResp)
	err := c.cc.Invoke(ctx, "/api.Data/UpdateText", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) AddText(ctx context.Context, in *TextInfo, opts ...grpc.CallOption) (*ObjectMeta, error) {
	out := new(ObjectMeta)
	err := c.cc.Invoke(ctx, "/api.Data/AddText", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) PutObjectChunk(ctx context.Context, in *PutObjectChunkReq, opts ...grpc.CallOption) (*PutObjectChunkResp, error) {
	out := new(PutObjectChunkResp)
	err := c.cc.Invoke(ctx, "/api.Data/putObjectChunk", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) GetObjectDownloadLink(ctx context.Context, in *ObjectMeta, opts ...grpc.CallOption) (*GetObjectDownloadLinkResp, error) {
	out := new(GetObjectDownloadLinkResp)
	err := c.cc.Invoke(ctx, "/api.Data/getObjectDownloadLink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DataServer is the server API for Data service.
// All implementations must embed UnimplementedDataServer
// for forward compatibility
type DataServer interface {
	// 获取对象(流式传输)
	GetObject(*ObjectMeta, Data_GetObjectServer) error
	// 上传对象(使用流式传输)
	PutObject(Data_PutObjectServer) error
	// 删除对象
	DeleteObject(context.Context, *ObjectMeta) (*UpdateObjectResp, error)
	// 获取文本
	GetText(context.Context, *ObjectMeta) (*GetTextResp, error)
	// 更新文本
	UpdateText(context.Context, *UpdateTextInfo) (*UpdateObjectResp, error)
	// 上传文本
	AddText(context.Context, *TextInfo) (*ObjectMeta, error)
	// 分片上传文件
	PutObjectChunk(context.Context, *PutObjectChunkReq) (*PutObjectChunkResp, error)
	// 获取对象的下载链接
	GetObjectDownloadLink(context.Context, *ObjectMeta) (*GetObjectDownloadLinkResp, error)
	mustEmbedUnimplementedDataServer()
}

// UnimplementedDataServer must be embedded to have forward compatible implementations.
type UnimplementedDataServer struct {
}

func (UnimplementedDataServer) GetObject(*ObjectMeta, Data_GetObjectServer) error {
	return status.Errorf(codes.Unimplemented, "method GetObject not implemented")
}
func (UnimplementedDataServer) PutObject(Data_PutObjectServer) error {
	return status.Errorf(codes.Unimplemented, "method PutObject not implemented")
}
func (UnimplementedDataServer) DeleteObject(context.Context, *ObjectMeta) (*UpdateObjectResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteObject not implemented")
}
func (UnimplementedDataServer) GetText(context.Context, *ObjectMeta) (*GetTextResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetText not implemented")
}
func (UnimplementedDataServer) UpdateText(context.Context, *UpdateTextInfo) (*UpdateObjectResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateText not implemented")
}
func (UnimplementedDataServer) AddText(context.Context, *TextInfo) (*ObjectMeta, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddText not implemented")
}
func (UnimplementedDataServer) PutObjectChunk(context.Context, *PutObjectChunkReq) (*PutObjectChunkResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutObjectChunk not implemented")
}
func (UnimplementedDataServer) GetObjectDownloadLink(context.Context, *ObjectMeta) (*GetObjectDownloadLinkResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetObjectDownloadLink not implemented")
}
func (UnimplementedDataServer) mustEmbedUnimplementedDataServer() {}

// UnsafeDataServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DataServer will
// result in compilation errors.
type UnsafeDataServer interface {
	mustEmbedUnimplementedDataServer()
}

func RegisterDataServer(s grpc.ServiceRegistrar, srv DataServer) {
	s.RegisterService(&Data_ServiceDesc, srv)
}

func _Data_GetObject_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ObjectMeta)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DataServer).GetObject(m, &dataGetObjectServer{stream})
}

type Data_GetObjectServer interface {
	Send(*ObjectInfo) error
	grpc.ServerStream
}

type dataGetObjectServer struct {
	grpc.ServerStream
}

func (x *dataGetObjectServer) Send(m *ObjectInfo) error {
	return x.ServerStream.SendMsg(m)
}

func _Data_PutObject_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DataServer).PutObject(&dataPutObjectServer{stream})
}

type Data_PutObjectServer interface {
	SendAndClose(*ObjectMeta) error
	Recv() (*ObjectPutInfo, error)
	grpc.ServerStream
}

type dataPutObjectServer struct {
	grpc.ServerStream
}

func (x *dataPutObjectServer) SendAndClose(m *ObjectMeta) error {
	return x.ServerStream.SendMsg(m)
}

func (x *dataPutObjectServer) Recv() (*ObjectPutInfo, error) {
	m := new(ObjectPutInfo)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Data_DeleteObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ObjectMeta)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).DeleteObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Data/DeleteObject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).DeleteObject(ctx, req.(*ObjectMeta))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_GetText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ObjectMeta)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).GetText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Data/GetText",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).GetText(ctx, req.(*ObjectMeta))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_UpdateText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTextInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).UpdateText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Data/UpdateText",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).UpdateText(ctx, req.(*UpdateTextInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_AddText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TextInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).AddText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Data/AddText",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).AddText(ctx, req.(*TextInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_PutObjectChunk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutObjectChunkReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).PutObjectChunk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Data/putObjectChunk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).PutObjectChunk(ctx, req.(*PutObjectChunkReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_GetObjectDownloadLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ObjectMeta)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).GetObjectDownloadLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Data/getObjectDownloadLink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).GetObjectDownloadLink(ctx, req.(*ObjectMeta))
	}
	return interceptor(ctx, in, info, handler)
}

// Data_ServiceDesc is the grpc.ServiceDesc for Data service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Data_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.Data",
	HandlerType: (*DataServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DeleteObject",
			Handler:    _Data_DeleteObject_Handler,
		},
		{
			MethodName: "GetText",
			Handler:    _Data_GetText_Handler,
		},
		{
			MethodName: "UpdateText",
			Handler:    _Data_UpdateText_Handler,
		},
		{
			MethodName: "AddText",
			Handler:    _Data_AddText_Handler,
		},
		{
			MethodName: "putObjectChunk",
			Handler:    _Data_PutObjectChunk_Handler,
		},
		{
			MethodName: "getObjectDownloadLink",
			Handler:    _Data_GetObjectDownloadLink_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetObject",
			Handler:       _Data_GetObject_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "PutObject",
			Handler:       _Data_PutObject_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "proto/data/data.proto",
}
