// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: proto/relation/relation.proto

package relation

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RelationClient is the client API for Relation service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RelationClient interface {
	// 添加节点
	AddNode(ctx context.Context, in *NodeInfo, opts ...grpc.CallOption) (*NodeMeta, error)
	// 删除节点
	DeleteNode(ctx context.Context, in *NodeMeta, opts ...grpc.CallOption) (*UpdateResp, error)
	// 更新节点
	UpdateNode(ctx context.Context, in *Node, opts ...grpc.CallOption) (*UpdateResp, error)
	// 查找节点
	GetNode(ctx context.Context, in *NodeMeta, opts ...grpc.CallOption) (*Node, error)
	// 查找某个节点下所有的内容
	GetNodeChild(ctx context.Context, in *GetNodeChildReq, opts ...grpc.CallOption) (*GetNodeChildResp, error)
	// 模糊查找节点
	FindNode(ctx context.Context, in *FindNodeReq, opts ...grpc.CallOption) (*FindNodeResp, error)
	// 查找某个节点的所有父节点
	GetNodeParent(ctx context.Context, in *GetNodeChildReq, opts ...grpc.CallOption) (*GetNodeChildResp, error)
	// 添加联系
	AddRelation(ctx context.Context, in *RelationInfo, opts ...grpc.CallOption) (*NodeMeta, error)
	// 删除联系
	DeleteRelation(ctx context.Context, in *NodeMeta, opts ...grpc.CallOption) (*UpdateResp, error)
	// 根据开始和结束节点ID来删除联系
	DeleteRelationWithNode(ctx context.Context, in *DeleteNodeWithRelationReq, opts ...grpc.CallOption) (*UpdateResp, error)
	// 更新联系
	UpdateRelation(ctx context.Context, in *UpdateRelationReq, opts ...grpc.CallOption) (*UpdateResp, error)
	// 查找联系
	GetRelation(ctx context.Context, in *NodeMeta, opts ...grpc.CallOption) (*RelationInfo, error)
}

type relationClient struct {
	cc grpc.ClientConnInterface
}

func NewRelationClient(cc grpc.ClientConnInterface) RelationClient {
	return &relationClient{cc}
}

func (c *relationClient) AddNode(ctx context.Context, in *NodeInfo, opts ...grpc.CallOption) (*NodeMeta, error) {
	out := new(NodeMeta)
	err := c.cc.Invoke(ctx, "/api.Relation/AddNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationClient) DeleteNode(ctx context.Context, in *NodeMeta, opts ...grpc.CallOption) (*UpdateResp, error) {
	out := new(UpdateResp)
	err := c.cc.Invoke(ctx, "/api.Relation/DeleteNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationClient) UpdateNode(ctx context.Context, in *Node, opts ...grpc.CallOption) (*UpdateResp, error) {
	out := new(UpdateResp)
	err := c.cc.Invoke(ctx, "/api.Relation/UpdateNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationClient) GetNode(ctx context.Context, in *NodeMeta, opts ...grpc.CallOption) (*Node, error) {
	out := new(Node)
	err := c.cc.Invoke(ctx, "/api.Relation/GetNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationClient) GetNodeChild(ctx context.Context, in *GetNodeChildReq, opts ...grpc.CallOption) (*GetNodeChildResp, error) {
	out := new(GetNodeChildResp)
	err := c.cc.Invoke(ctx, "/api.Relation/GetNodeChild", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationClient) FindNode(ctx context.Context, in *FindNodeReq, opts ...grpc.CallOption) (*FindNodeResp, error) {
	out := new(FindNodeResp)
	err := c.cc.Invoke(ctx, "/api.Relation/FindNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationClient) GetNodeParent(ctx context.Context, in *GetNodeChildReq, opts ...grpc.CallOption) (*GetNodeChildResp, error) {
	out := new(GetNodeChildResp)
	err := c.cc.Invoke(ctx, "/api.Relation/GetNodeParent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationClient) AddRelation(ctx context.Context, in *RelationInfo, opts ...grpc.CallOption) (*NodeMeta, error) {
	out := new(NodeMeta)
	err := c.cc.Invoke(ctx, "/api.Relation/AddRelation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationClient) DeleteRelation(ctx context.Context, in *NodeMeta, opts ...grpc.CallOption) (*UpdateResp, error) {
	out := new(UpdateResp)
	err := c.cc.Invoke(ctx, "/api.Relation/DeleteRelation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationClient) DeleteRelationWithNode(ctx context.Context, in *DeleteNodeWithRelationReq, opts ...grpc.CallOption) (*UpdateResp, error) {
	out := new(UpdateResp)
	err := c.cc.Invoke(ctx, "/api.Relation/DeleteRelationWithNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationClient) UpdateRelation(ctx context.Context, in *UpdateRelationReq, opts ...grpc.CallOption) (*UpdateResp, error) {
	out := new(UpdateResp)
	err := c.cc.Invoke(ctx, "/api.Relation/UpdateRelation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationClient) GetRelation(ctx context.Context, in *NodeMeta, opts ...grpc.CallOption) (*RelationInfo, error) {
	out := new(RelationInfo)
	err := c.cc.Invoke(ctx, "/api.Relation/GetRelation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RelationServer is the server API for Relation service.
// All implementations must embed UnimplementedRelationServer
// for forward compatibility
type RelationServer interface {
	// 添加节点
	AddNode(context.Context, *NodeInfo) (*NodeMeta, error)
	// 删除节点
	DeleteNode(context.Context, *NodeMeta) (*UpdateResp, error)
	// 更新节点
	UpdateNode(context.Context, *Node) (*UpdateResp, error)
	// 查找节点
	GetNode(context.Context, *NodeMeta) (*Node, error)
	// 查找某个节点下所有的内容
	GetNodeChild(context.Context, *GetNodeChildReq) (*GetNodeChildResp, error)
	// 模糊查找节点
	FindNode(context.Context, *FindNodeReq) (*FindNodeResp, error)
	// 查找某个节点的所有父节点
	GetNodeParent(context.Context, *GetNodeChildReq) (*GetNodeChildResp, error)
	// 添加联系
	AddRelation(context.Context, *RelationInfo) (*NodeMeta, error)
	// 删除联系
	DeleteRelation(context.Context, *NodeMeta) (*UpdateResp, error)
	// 根据开始和结束节点ID来删除联系
	DeleteRelationWithNode(context.Context, *DeleteNodeWithRelationReq) (*UpdateResp, error)
	// 更新联系
	UpdateRelation(context.Context, *UpdateRelationReq) (*UpdateResp, error)
	// 查找联系
	GetRelation(context.Context, *NodeMeta) (*RelationInfo, error)
	mustEmbedUnimplementedRelationServer()
}

// UnimplementedRelationServer must be embedded to have forward compatible implementations.
type UnimplementedRelationServer struct {
}

func (UnimplementedRelationServer) AddNode(context.Context, *NodeInfo) (*NodeMeta, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddNode not implemented")
}
func (UnimplementedRelationServer) DeleteNode(context.Context, *NodeMeta) (*UpdateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNode not implemented")
}
func (UnimplementedRelationServer) UpdateNode(context.Context, *Node) (*UpdateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNode not implemented")
}
func (UnimplementedRelationServer) GetNode(context.Context, *NodeMeta) (*Node, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNode not implemented")
}
func (UnimplementedRelationServer) GetNodeChild(context.Context, *GetNodeChildReq) (*GetNodeChildResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNodeChild not implemented")
}
func (UnimplementedRelationServer) FindNode(context.Context, *FindNodeReq) (*FindNodeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindNode not implemented")
}
func (UnimplementedRelationServer) GetNodeParent(context.Context, *GetNodeChildReq) (*GetNodeChildResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNodeParent not implemented")
}
func (UnimplementedRelationServer) AddRelation(context.Context, *RelationInfo) (*NodeMeta, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRelation not implemented")
}
func (UnimplementedRelationServer) DeleteRelation(context.Context, *NodeMeta) (*UpdateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRelation not implemented")
}
func (UnimplementedRelationServer) DeleteRelationWithNode(context.Context, *DeleteNodeWithRelationReq) (*UpdateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRelationWithNode not implemented")
}
func (UnimplementedRelationServer) UpdateRelation(context.Context, *UpdateRelationReq) (*UpdateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRelation not implemented")
}
func (UnimplementedRelationServer) GetRelation(context.Context, *NodeMeta) (*RelationInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRelation not implemented")
}
func (UnimplementedRelationServer) mustEmbedUnimplementedRelationServer() {}

// UnsafeRelationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RelationServer will
// result in compilation errors.
type UnsafeRelationServer interface {
	mustEmbedUnimplementedRelationServer()
}

func RegisterRelationServer(s grpc.ServiceRegistrar, srv RelationServer) {
	s.RegisterService(&Relation_ServiceDesc, srv)
}

func _Relation_AddNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServer).AddNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Relation/AddNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServer).AddNode(ctx, req.(*NodeInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Relation_DeleteNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeMeta)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServer).DeleteNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Relation/DeleteNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServer).DeleteNode(ctx, req.(*NodeMeta))
	}
	return interceptor(ctx, in, info, handler)
}

func _Relation_UpdateNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Node)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServer).UpdateNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Relation/UpdateNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServer).UpdateNode(ctx, req.(*Node))
	}
	return interceptor(ctx, in, info, handler)
}

func _Relation_GetNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeMeta)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServer).GetNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Relation/GetNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServer).GetNode(ctx, req.(*NodeMeta))
	}
	return interceptor(ctx, in, info, handler)
}

func _Relation_GetNodeChild_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNodeChildReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServer).GetNodeChild(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Relation/GetNodeChild",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServer).GetNodeChild(ctx, req.(*GetNodeChildReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Relation_FindNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindNodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServer).FindNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Relation/FindNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServer).FindNode(ctx, req.(*FindNodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Relation_GetNodeParent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNodeChildReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServer).GetNodeParent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Relation/GetNodeParent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServer).GetNodeParent(ctx, req.(*GetNodeChildReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Relation_AddRelation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RelationInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServer).AddRelation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Relation/AddRelation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServer).AddRelation(ctx, req.(*RelationInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Relation_DeleteRelation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeMeta)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServer).DeleteRelation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Relation/DeleteRelation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServer).DeleteRelation(ctx, req.(*NodeMeta))
	}
	return interceptor(ctx, in, info, handler)
}

func _Relation_DeleteRelationWithNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNodeWithRelationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServer).DeleteRelationWithNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Relation/DeleteRelationWithNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServer).DeleteRelationWithNode(ctx, req.(*DeleteNodeWithRelationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Relation_UpdateRelation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRelationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServer).UpdateRelation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Relation/UpdateRelation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServer).UpdateRelation(ctx, req.(*UpdateRelationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Relation_GetRelation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeMeta)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServer).GetRelation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Relation/GetRelation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServer).GetRelation(ctx, req.(*NodeMeta))
	}
	return interceptor(ctx, in, info, handler)
}

// Relation_ServiceDesc is the grpc.ServiceDesc for Relation service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Relation_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.Relation",
	HandlerType: (*RelationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddNode",
			Handler:    _Relation_AddNode_Handler,
		},
		{
			MethodName: "DeleteNode",
			Handler:    _Relation_DeleteNode_Handler,
		},
		{
			MethodName: "UpdateNode",
			Handler:    _Relation_UpdateNode_Handler,
		},
		{
			MethodName: "GetNode",
			Handler:    _Relation_GetNode_Handler,
		},
		{
			MethodName: "GetNodeChild",
			Handler:    _Relation_GetNodeChild_Handler,
		},
		{
			MethodName: "FindNode",
			Handler:    _Relation_FindNode_Handler,
		},
		{
			MethodName: "GetNodeParent",
			Handler:    _Relation_GetNodeParent_Handler,
		},
		{
			MethodName: "AddRelation",
			Handler:    _Relation_AddRelation_Handler,
		},
		{
			MethodName: "DeleteRelation",
			Handler:    _Relation_DeleteRelation_Handler,
		},
		{
			MethodName: "DeleteRelationWithNode",
			Handler:    _Relation_DeleteRelationWithNode_Handler,
		},
		{
			MethodName: "UpdateRelation",
			Handler:    _Relation_UpdateRelation_Handler,
		},
		{
			MethodName: "GetRelation",
			Handler:    _Relation_GetRelation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/relation/relation.proto",
}
