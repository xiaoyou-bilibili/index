// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"index.data/ent/object"
)

// Object is the model entity for the Object schema.
type Object struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// ObjectName holds the value of the "object_name" field.
	ObjectName string `json:"object_name,omitempty"`
	// ContentType holds the value of the "content_type" field.
	ContentType string `json:"content_type,omitempty"`
	// ObjectLocation holds the value of the "object_location" field.
	ObjectLocation uint8 `json:"object_location,omitempty"`
	// ObjectSize holds the value of the "object_size" field.
	ObjectSize int64 `json:"object_size,omitempty"`
	// ObjectSha256 holds the value of the "object_sha256" field.
	ObjectSha256 string `json:"object_sha256,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Object) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case object.FieldObjectLocation, object.FieldObjectSize:
			values[i] = new(sql.NullInt64)
		case object.FieldID, object.FieldObjectName, object.FieldContentType, object.FieldObjectSha256:
			values[i] = new(sql.NullString)
		case object.FieldCreatedAt, object.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Object", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Object fields.
func (o *Object) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case object.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				o.ID = value.String
			}
		case object.FieldObjectName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field object_name", values[i])
			} else if value.Valid {
				o.ObjectName = value.String
			}
		case object.FieldContentType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field content_type", values[i])
			} else if value.Valid {
				o.ContentType = value.String
			}
		case object.FieldObjectLocation:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field object_location", values[i])
			} else if value.Valid {
				o.ObjectLocation = uint8(value.Int64)
			}
		case object.FieldObjectSize:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field object_size", values[i])
			} else if value.Valid {
				o.ObjectSize = value.Int64
			}
		case object.FieldObjectSha256:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field object_sha256", values[i])
			} else if value.Valid {
				o.ObjectSha256 = value.String
			}
		case object.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				o.CreatedAt = value.Time
			}
		case object.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				o.UpdatedAt = value.Time
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Object.
// Note that you need to call Object.Unwrap() before calling this method if this Object
// was returned from a transaction, and the transaction was committed or rolled back.
func (o *Object) Update() *ObjectUpdateOne {
	return (&ObjectClient{config: o.config}).UpdateOne(o)
}

// Unwrap unwraps the Object entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (o *Object) Unwrap() *Object {
	tx, ok := o.config.driver.(*txDriver)
	if !ok {
		panic("ent: Object is not a transactional entity")
	}
	o.config.driver = tx.drv
	return o
}

// String implements the fmt.Stringer.
func (o *Object) String() string {
	var builder strings.Builder
	builder.WriteString("Object(")
	builder.WriteString(fmt.Sprintf("id=%v", o.ID))
	builder.WriteString(", object_name=")
	builder.WriteString(o.ObjectName)
	builder.WriteString(", content_type=")
	builder.WriteString(o.ContentType)
	builder.WriteString(", object_location=")
	builder.WriteString(fmt.Sprintf("%v", o.ObjectLocation))
	builder.WriteString(", object_size=")
	builder.WriteString(fmt.Sprintf("%v", o.ObjectSize))
	builder.WriteString(", object_sha256=")
	builder.WriteString(o.ObjectSha256)
	builder.WriteString(", created_at=")
	builder.WriteString(o.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(o.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Objects is a parsable slice of Object.
type Objects []*Object

func (o Objects) config(cfg config) {
	for _i := range o {
		o[_i].config = cfg
	}
}
